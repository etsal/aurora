SRCROOT="/root/sls"
NEWFS=$SRCROOT/tools/newfs_sls/newfs_sls
SLSCTL=$SRCROOT/tools/slsctl/slsctl
SLSROOT="$SRCROOT/root.tar.gz"
MNT=/testmnt

# Load and unload kernel modules
loadsls()
{
    kldload "$SRCROOT/sls/sls.ko"
}

loadslos()
{
    kldload "$SRCROOT/slos/slos.ko"
}

loadmod()
{
    loadslos
    loadsls
}

# Unload the SLS. Necessary for unmounting/unloading the SLOS
unloadsls()
{
    kldunload sls
}

unloadslos()
{
    kldunload slos
}

unloadmod()
{
    unloadsls
    unloadslos
}

# Create and destroy memory device
createmd()
{
    MDDISK=`mdconfig -a -t malloc -s 5g`
    DISK="$MDDISK"
    DISKPATH="/dev/$MDDISK"
}

destroymd()
{
    mdconfig -d -u $1
}

slsnewfs()
{
    # Pipe to /dev/null if there is no log
    TESTLOG=${TESTLOG:-"/dev/null"}
    $NEWFS $DISKPATH > $TESTLOG 2> $TESTLOG
}

slsmount()
{
    mount -t slsfs $DISKPATH $MNT
}

slsunmount()
{
    umount $MNT
}

aursetup()
{
    loadmod
    slsnewfs
    slsmount
}

aurteardown()
{
    unloadsls
    slsunmount
    unloadslos
}

slscheckpoint()
{
    $SLSCTL attach -p $1 -m
    $SLSCTL checkpoint -m -r
}

slsrestore()
{
    $SLSCTL restore -m &
}

slsosdcheckpoint()
{
    $SLSCTL attach -p $1
    $SLSCTL checkpoint -r
}

slslazycheckpoint()
{
    $SLSCTL partadd -o $2 -l
    $SLSCTL attach -p $1 -o $2
    $SLSCTL checkpoint -o $2 -r
}

slsosdrestore()
{
    $SLSCTL restore &
}

slslazyrestore()
{
    $SLSCTL restore -o $1 &
}

killandwait()
{
    kill $1
    wait $1
}

finddisk()
{
    if [ -f "$DISKPATH" ] ; then
	return
    fi

    DISKS=$(ls -1 /dev/ | grep -wE '(vtbd|md|nvd)[0-9]*')
    MOUNTED=$(mount | grep -oE '(vtbd|md|nvd)[0-9]*')

    # Search for the first nonmounted disk
    for d in $DISKS;
    do
	if [ -z "$(echo $MOUNTED | grep $d)" ];
	then
	    DISK="$d"
	    DISKPATH="/dev/$DISK"
	    break
	fi
    done
}

createroot()
{
    if [ ! -f "$SLSROOT" ]; then
	$SRCROOT/scripts/image.sh
    fi
}

installroot()
{
    # Unpack the root into the mount if it exists
    tar -C "$MNT" -xf "$SLSROOT"
}
